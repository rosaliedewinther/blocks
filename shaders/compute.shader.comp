#version 440

float PI = 3.1415926538;

struct Uniforms{
    vec3 position;
    float time;
    vec3 direction;
    vec3 sun_dir;
    uint brickmap_size;
    uint brick_size;
    vec3[3] ray_cast_data;
    vec4[16] colors;
};
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba8ui, binding = 0) writeonly uniform uimage2D img_output;
layout(binding = 1) readonly buffer brickmaps{
    uint[] brick_index;
};
layout(binding = 2) readonly buffer bricks{
    uint[] encoded_voxels;
};
layout(binding=3) readonly uniform camera_details{
    Uniforms uni;
};

vec3 rotation_x(vec3 v, float angle){
    float s = sin(angle);
    float c = cos(angle);

    mat3 matrix = mat3(
        1.0, 0.0, 0.0,
        0.0, c, s,
        0.0, -s, c
    );
    return matrix*v;
}
vec3 rotation_y(vec3 v, float angle){
    float s = sin(angle);
    float c = cos(angle);
    mat3 matrix = mat3(
        c, 0.0, -s,
        0.0, 1.0, 0.0,
        s, 0.0, c
    );
    return matrix*v;
}
vec3 rotation_z(vec3 v, float angle){
    float s = sin(angle);
    float c = cos(angle);
    mat3 matrix = mat3(
        c, -s, 0.0,
        s, c, 0.0,
        0.0, 0.0, 1.0
    );
    return matrix*v;
}

vec3 generateRayDirection(){
    vec2 pixel_coords = gl_GlobalInvocationID.xy; //real pixel location
    float fov = 60;
    vec3 pij = uni.ray_cast_data[2]+uni.ray_cast_data[0]*(pixel_coords[0]-1) + uni.ray_cast_data[1]*(pixel_coords[1]-1);
    vec3 rij = normalize(pij);
    return rij;
}

uvec4 draw_sun(vec3 direction, uvec4 pixel){
    if (dot(direction, uni.sun_dir) < -0.99 ){
        return pixel + uvec4(pow(dot(direction, uni.sun_dir)*-1,1000) * vec4(255, 245, 127,255));
    }
    return pixel;
}

uvec4 draw_skyline(vec3 direction, uvec4 pixel){
    return uvec4(mix(vec3(200,200,200), vec3(51,102,244), direction[1]), 255);
}

const uint OUT_OF_BOUNDS = 2147483647;

uint get_brick_index(ivec3 location){
    uvec3 which_brickmap = uvec3(location/(uni.brick_size * uni.brickmap_size));
    if (which_brickmap[0] > 2 || which_brickmap[1] > 2 || which_brickmap[2] > 2){
        return OUT_OF_BOUNDS; //max uint
    }
    uint brickmap_offset = uint((which_brickmap[0] + which_brickmap[1] * 3 + which_brickmap[2] * 9) * pow(uni.brickmap_size,3));
    ivec3 which_brick = ivec3(mod(location/uni.brick_size, uni.brickmap_size));
    uint brick_offset = uint(which_brick[0] + which_brick[1] * uni.brickmap_size + which_brick[2] * uni.brickmap_size * uni.brickmap_size);
    return brick_index[brick_offset + brickmap_offset];
}

uvec4 get_voxel_color(ivec3 location){
    //validate indices
    uint brick_i = get_brick_index(location);
    if (OUT_OF_BOUNDS == brick_i){
        return uvec4(0, 0, 0, 0);
    } else if (brick_i > 2097152){
        return uvec4(0,0,0,254);
    } else {
        ivec3 which_voxel = ivec3(mod(location, uni.brick_size));
        uint voxel_index = uint(which_voxel[0] + which_voxel[1] * uni.brick_size + which_voxel[2] * uni.brick_size * uni.brick_size);
        uint voxel_data = encoded_voxels[(int(brick_i * pow(uni.brick_size, 3)) + voxel_index)/4];
        uint voxel = uint(0xFF) & uint(voxel_data >> uint(8 * uint(mod(voxel_index,4))));
        return uvec4(uni.colors[voxel]);
    }
}



//https://www.researchgate.net/profile/Kai-Xiao-9/publication/233899848_Efficient_implementation_of_the_3D-DDA_ray_traversal_algorithm_on_GPU_and_its_application_in_radiation_dose_calculation/links/5acfaa9b4585154f3f47bf20/Efficient-implementation-of-the-3D-DDA-ray-traversal-algorithm-on-GPU-and-its-application-in-radiation-dose-calculation.pdf?origin=publication_detail
uvec4 trace_ray(vec3 direction, vec3 origin){
    ivec3 current_voxel = ivec3(origin);
    int iter = 0;

    vec3 deltaDist = abs(vec3(length(direction))/direction);
    vec3 deltaDistBig = abs(vec3(uni.brick_size)/direction);
    vec3 step = ivec3(sign(direction));
    vec3 sideDist = (sign(direction) * (vec3(current_voxel) - origin) + (sign(direction) * 0.5) + 0.5) * deltaDist;
    //vec3 brickSideDist = (sign(direction) * (ivec3(current_voxel/uni.brick_size) - origin) + (sign(direction) * 0.5) + 0.5) * deltaDist;


    bool big_step = false;
    bvec3 mask;
    bool been_inside = false;

    while(iter < 1000){
        uvec4 voxel = get_voxel_color(current_voxel);


        if (voxel[3] == 0){                     // out of visible world
            if (been_inside){
                return uvec4(0,0,0,255);
            }
        } else if (voxel[3] == 254){            // brick is empty, can accelerate
            big_step = true;
        } else if (voxel != uvec4(0,0,0,255)){  // voxel hit

            //ty iMplode nZ
            float shadow;
            if (mask.x) {
                shadow = 0.5;
            }
            if (mask.y) {
                shadow = 1.0;
            }
            if (mask.z) {
                shadow = 0.75;
            }
            return uvec4(shadow * voxel.xyz, 255);//voxel;
        } else{
            been_inside = true;
        }
        iter+=1;
        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));
        sideDist += vec3(mask) * deltaDist;
        current_voxel += ivec3(vec3(mask)*step);
    }
    return uvec4(0,0,0,255);
}


void main() {
    vec3 origin = uni.position;
    vec3 direction = generateRayDirection();
    uvec4 pixel = trace_ray(direction, origin);
    if (pixel == vec4(0,0,0,255)){
        pixel = draw_skyline(direction, pixel);
        pixel = draw_sun(direction, pixel);
    }


    imageStore(img_output, ivec2(gl_GlobalInvocationID.xy), pixel);
    return;
}
